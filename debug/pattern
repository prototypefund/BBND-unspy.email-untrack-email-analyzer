#!/usr/bin/env php
<?php

use Geeks4change\BbndAnalyzer\Analyzer\NewsletterServicesMatcher\ServiceMatcherProviderRepository;

include 'vendor/autoload.php';

$usage = "Usage: $argv[0] [service] [image|link] [pattern] [?string-to-match]\n";
[, $service, $typeName, $patternName, $string] = $argv + ['', '', '', '', ''];

$repo = new ServiceMatcherProviderRepository();

/** @var \Geeks4change\BbndAnalyzer\Analyzer\NewsletterServicesMatcher\ServiceMatcherProvider $toolPattern */
$toolPatternCollection = $repo->getServiceMatcherProviderCollection();
$toolPattern = $toolPatternCollection[$service] ?? NULL;
if (!$toolPattern) {
  print $usage;
  printf("Available services: %s\n", implode('|', array_keys(iterator_to_array($toolPatternCollection))));
  exit(1);
}
/** @var \Geeks4change\BbndAnalyzer\Analyzer\NewsletterServicesMatcher\UrlsMatcher\PerServiceUrlsMatcher\PerServiceUrlMatcherBase[] $types */
$types = [
  'link' => $toolPattern->getLinkUrlMatchers(),
  'image' => $toolPattern->getImageUrlMatchers(),
  'header' => $toolPattern->getHeadersMatchers(),
];
$patterns = $types[$typeName] ?? NULL;
if (!$patterns) {
  print $usage;
  printf("Available types: %s\n", implode('|', array_keys($types)));
  exit(1);
}
$pattern = $patterns[$patternName] ?? NULL;
if (!$pattern) {
  print $usage;
  /** @noinspection PhpParamsInspection */
  printf("Available patterns: %s\n", implode('|', array_keys($patterns)));
  exit(1);
}
$regex = $pattern->getRegex();
print "Pattern: $regex\n";
if ($string) {
  $match = $pattern->match($string);
  print "Match: ";
  print ($match ? 'Yes!' : 'nope');
  print "\n";
}
