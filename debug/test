#!/usr/bin/env php
<?php

use Geeks4change\UntrackEmailAnalyzer\Analyzer\Analyzer;
use Geeks4change\UntrackEmailAnalyzer\Api;
use Geeks4change\UntrackEmailAnalyzer\DirInfo;
use Geeks4change\UntrackEmailAnalyzer\Matcher\MatcherRestrictor;
use Geeks4change\UntrackEmailAnalyzer\Utility\ObjectToArray;
use Symfony\Component\Yaml\Yaml;

include 'vendor/autoload.php';

$fileNamePairs = iterator_to_array(DirInfo::getTestEmailFileNames());
$testId = $argv[1] ?? '';

$doUpdate = str_ends_with($testId, '!');
if ($doUpdate) {
  $testId = substr($testId, 0, -1);
}
$doPrint = str_ends_with($testId, '?');
if ($doPrint) {
  $testId = substr($testId, 0, -1);
}

if (!isset($fileNamePairs[$testId])) {
  print("Run test of on one of the packaged examples.\n");
  print("Usage: $0 PROVIDER:TEST\n");
  print("Example: $0 mailchimp:1\n");
  print("To print result: $0 PROVIDER:TEST?\n");
  print("To update expected result: $0 PROVIDER:TEST!\n");
  $values = implode(' ', array_keys($fileNamePairs));
  print("Possible values: $values\n");
  die(1);
}
[$emailFile, $resultFile] = $fileNamePairs[$testId];
$fileContent = file_get_contents($emailFile);
$analyzer = Api::getDebugAnalyzer();
$result = $analyzer->analyze($fileContent);
if ($doUpdate) {
  [$providerId, $testSubId] = explode(':', $testId);
  $result = MatcherRestrictor::restrictToMatcher($providerId, $result);
}
$testSummary = ObjectToArray::convert($result);
$yaml = Yaml::dump($testSummary, 99, 2);
if ($doPrint) {
  print $yaml;
}
if ($doUpdate) {
  file_put_contents($resultFile, $yaml);
  print("\nUpdated $resultFile\n");
}
